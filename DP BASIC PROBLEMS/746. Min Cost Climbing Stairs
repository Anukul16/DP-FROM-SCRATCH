import java.util.Scanner;

public class MinCostClimbingStairs {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int cost[]=new int[n];
        for(int i=0;i<n;i++)cost[i]=sc.nextInt();
        int ans=minCostClimbingStairs(cost);
        System.out.println(ans);
    }
    // Memoization
    public static int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        return Math.min(solve(n-1, cost, new int[n + 1]),solve(n-2,cost,new int[n+1]));
    }

    public int solve(int n, int[] cost, int[] dp) {
       if(n==0 || n==1){
           return cost[n];
       }
       if(dp[n]!=0)return dp[n];
       
       int ans1=solve(n-1,cost,dp);
       int ans2=solve(n-2,cost,dp);
       int ans=cost[n]+Math.min(ans1,ans2);
        dp[n]=ans;
       return ans;
       
    }

    // Tabulation
    public static  int minCostClimbingStairs(int[] cost) {
       int n=cost.length;
       int[]dp=new int[n+1];
       dp[0]=cost[0];
       dp[1]=cost[1];
       for(int i=2;i<n;i++){
           dp[i]=cost[i]+Math.min(dp[i-1],dp[i-2]);
       }
       return Math.min(dp[n-1],dp[n-2]);
    }
}
