import java.util.*;

public class MinimalCost {
    public static void main(String[] args) {
          Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int k=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)arr[i]=sc.nextInt();
        int ans=minimizeCost(arr,n,k);
        System.out.println(ans);
    }
    // Memoization

    public static int minimizeCost(int[]arr,int n,int k){
        int[]dp=new int[n];
        Arrays.fill(dp,-1);
        return solve(n-1, arr, k, dp);
    }

    public static int solve(int n, int[] arr, int k, int[] dp) {
        if (n == 0)
            return 0;
        if (dp[n] != -1)
            return dp[n];
        int ans = Integer.MAX_VALUE;
        for (int i = 1; i <= k; i++) {
            if (n - i >= 0) {
                int jump = Math.abs(arr[n] - arr[n - i]) + solve(n - i, arr, k, dp);
                ans = Math.min(ans, jump);
            }
        }
        dp[n] = ans;
        return ans;
    }

    // Tabulation

    public int minimizeCost(int arr[], int n, int k) {
        // code here
        int[]dp=new int[n];
        
        dp[0]=0;
        dp[1]=Math.abs(arr[1]-arr[0]);
        
        for(int i=2;i<N;i++){
            int ans=Integer.MAX_VALUE;
            for(int j=1;j<=k;j++){
                if(i-j>=0){
                   int jump=Math.abs(arr[i]-arr[i-j])+dp[i-j];
                    ans=Math.min(jump,ans);
                }
            }
            dp[i]=ans;
        }
        return dp[n-1];
    }

}
